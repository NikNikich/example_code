# Telegraf configuration

# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.

# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.

# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.

# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will cache metric_buffer_limit metrics for each output, and will
  ## flush this buffer on a successful write.
  metric_buffer_limit = 10000
  ## Flush the buffer whenever full, regardless of flush_interval.
  flush_buffer_when_full = true

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## Run telegraf in debug mode
  debug = false
  ## Run telegraf in quiet mode
  quiet = false
  ## Override default hostname, if empty use os.Hostname()
  hostname = "telegraf"


###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

# Configuration for influxdb server to send metrics to
[[outputs.influxdb_v2]]
  # The full HTTP or UDP endpoint URL for your InfluxDB instance.
  # Multiple urls can be specified but it is assumed that they are part of the same
  # cluster, this means that only ONE of the urls will be written to each interval.
  # urls = ["udp://localhost:8089"] # UDP endpoint example
  urls = ["http://influxdb:8086"] # required
  organization = "united-water"
  bucket = "rabbit_dev_1"
#  bucket = "test1"
  token = "Q5HlGZePqCkzFYLH8Mfp8hZoBhx_3dQk4LFPEhH-wXe9AIQgqnfm6n0IVOR7DIi0-E0ZYG_7NB6_muAwRVNc7Q=="
 # The target database for metrics (telegraf will create it if not exists)
  #database = "influx" # required
  # Precision of writes, valid values are "ns", "us" (or "Âµs"), "ms", "s", "m", "h".
  # note: using second precision greatly helps InfluxDB compression
  precision = "s"

#  [[processors.regex]]
#  [[processors.regex.tags]]
# The Magic Section
#  key = "topic"
#   pattern = ".*/.*/(.*)/.*/.*/.*"
#   replacement = "${2}"
#   result_key = "sensorID"
  ## Write timeout (for the InfluxDB client), formatted as a string.
  ## If not provided, will default to 5s. 0s means no timeout (not recommended).
  #timeout = "5s"
  # username = "admin"
  # password = "Cid2Q9p2J1BM"
  # Set the user agent for HTTP POSTs (can be useful for log differentiation)
  # user_agent = "telegraf"
  # Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
  # udp_payload = 512
###############################################################################
#                                  INPUTS                                     #
###############################################################################
[[inputs.amqp_consumer]]
   brokers = ["amqp://rabbitmq:5672"]
   username = "united_rabbit"
   password = "5lIHHO5QcvdSi"
   queue = "devs_messagges"
   queue_passive = true
#   topics = [
#    "watwell/devs/+/rpc/to_dev/req",
#    "watwell/devs/+/rpc/to_dev/res"
#   ]
#   topic_tag = "topic"
#   qos = 0
#  data_format = "value"
#   data_type = "string"
   data_format = "influx"
   topic_tag = "topic"
     qos = 0
     client_id = "telegraf_client"

#[[inputs.amqp_consumer]]
#   brokers = ["amqp://rabbitmq:5672"]
#   username = "united_rabbit"
#   password = "5lIHHO5QcvdSi"
#   queue = "test2"
#   queue_passive = true
#   data_format = "value"
#   data_type = "string"
#   data_format = "influx"
#[[inputs.amqp_consumer]]
#   brokers = ["amqp://rabbitmq:5672"]
#   username = "united_rabbit"
#   password = "5lIHHO5QcvdSi"
#   queue = "test3"
#   queue_passive = true
#   data_format = "value"
#   data_type = "string"
#   data_format = "influx"

#[[inputs.mqtt_consumer]]
# Configuration for MQTT Broker
#  servers = ["tcp://rabbitmq:1883"]
#  username = "united_rabbit"
#   password = "5lIHHO5QcvdSi"
#  topics = [
#    "watwell/devs/+/rpc/to_dev/req",
#    "watwell/devs/+/rpc/to_dev/res"
#  ]
#  topic_tag = "topic"
#  qos = 0
#  client_id = "telegraf_client"
#  data_format = "influx"
